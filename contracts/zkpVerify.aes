
@compiler >= 6

include "BLS12_381.aes"
include "List.aes"

contract VerifyZKP =

    record verify_key = { a : BLS12_381.g1, b : BLS12_381.g2, c : BLS12_381.g2, d : BLS12_381.g2, ic : list(BLS12_381.g1) }
    record proof = { a : BLS12_381.g1, b : BLS12_381.g2, c : BLS12_381.g1 }

    public entrypoint verifyingKey() : verify_key =
        let _a = BLS12_381.mk_g1(
            475538982131046873843442121414174300144859982592374460542523875215829930624832351096256459840108685193524501555043,
            2539238135158623659633381219904415073141314570869067815773924371927842080851883649821562296123579231677263289292245,
            1
         )

        let _b = BLS12_381.mk_g2(
            1720282856386830401725530961675687098371806405652449994916520925750631092294320516680275826060902830827031483580673,
            1504740942471480566621839710114191108810068636950079861807857253737080172211183518447616126239560314790015855989610,
            1507317910400944990897209372339527617458977247016282786520851200018289678489434459433185125945813073584166834514901,
            3920029646557310545760142735768298329027737344504615841152689002734237529855749387236020432855992555268679691691467,
            1,
            0
         )

        let _c = BLS12_381.mk_g2(
            352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160,
            3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758,
            1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905,
            927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,
            1,
            0
         )

        let _d = BLS12_381.mk_g2(
            3687735304771323493850320985616007328346515123132822538287226758767702987297146949080411680922966337109960241404726,
            3222542418257089021729016901346909958776679170549363475589570516155461265009821135528477438507659095964015059890991,
            3863444710025023556400479966606233756040053678626188557011540593056156209395932343676612729990322567420833226757354,
            2899465927235473906721263159412142502253121216071053678122762834471426816455583660850543450244879106689148208551164,
            1,
            0
         )

        let _ic: list(BLS12_381.g1) = [
            BLS12_381.mk_g1(
                3114830744557280586914090481832647447322708055088185758348774329803167413315518088793956072306006228777751812142747,
                1444469339111699057715488202753725881446945353049653102356776914011920911547919941122354301293597041040109071385225,
                1
            ),
            BLS12_381.mk_g1(
                1430047659617151949184515395662728923072423426454660820725440917198526861682161687304867135518478080500780833842488,
                2820502551782830993001097404828019508694295779525863948857091180629698593128866351578949162251937037932576853176885,
                1
            ),
            BLS12_381.mk_g1(
                1989505728684101463450221426852493745413220464243445541386525789183248024882063586943207155645094432414220343794577,
                3538784718342621442620031857971975788953761832165481147112319153201703434567009263597648390304466067739565822856806,
                1
            ),
            BLS12_381.mk_g1(
                2745778052939342770868729405995071382933290929654061946338244560838110015929035655336067461855305333443823952580114,
                2061314738370889199884119785111947299486048127708328069308662990097314108675916259415789019361349601653947068850984,
                1
            ),
            BLS12_381.mk_g1(
                1078329373425636920576537076806181348752081014020142848511750258940227565519763851254626135776475707725389275251356,
                2529277360401439256423618444435569649083744881787480996211058312041672478119979685309567784408941205344833062181704,
                1
            ),
            BLS12_381.mk_g1(
                407857679759520973387452534500330345421324696797274694657746396912495264723114864490581207740720359093506691693227,
                288384718536552434794213373453560338559215631731178176003658264771542939078515775246366914919786203345751548616315,
                1
            ),
            BLS12_381.mk_g1(
                3945745076208103474311511993972029309431421274257168246037400181822573285608877533949022024471254401269906013710080,
                2412170048247416122510096298348237404939122961559549444937953227773676036425192576923658101299152013228583533255628,
                1
            )
         ]

        {a =_a, b = _b, c = _c, d = _d, ic = _ic}

    public entrypoint verify(proof_abc: list(int), inp: list(int)) : bool =
        let p: proof = make_proof(proof_abc)
        let inp: list(BLS12_381.fr) = make_input(inp)
        let vk = verifyingKey()
        let vk_x = verify_proof(inp, p, vk)

        BLS12_381.pairing_check([BLS12_381.g1_neg(p.a), vk.a, vk_x, p.c],
                            [p.b, vk.b, vk.c, vk.d])

    function verify_proof(inputs: list(BLS12_381.fr), pr: proof, vk: verify_key) : BLS12_381.g1 =

        require(List.length(inputs) + 1 == List.length(vk.ic), "verifier-bad-input")

        let vk_x = calc_vk_x(vk.ic, inputs)

        vk_x

    function calc_vk_x(ics : list(BLS12_381.g1), xs : list(BLS12_381.fr)) : BLS12_381.g1 =
        switch(ics)
            (ic :: ics) => calc_vk_x_(ic, ics, xs)

    function calc_vk_x_(vk_x : BLS12_381.g1, ics : list(BLS12_381.g1), xs : list(BLS12_381.fr)) : BLS12_381.g1 =
        switch((ics, xs))
            ([], []) => vk_x
            (ic :: ics, x :: xs) => calc_vk_x_(BLS12_381.g1_add(vk_x, BLS12_381.g1_mul(x, ic)), ics, xs)

    function make_proof(abc: list(int)): proof =
        {
            a = BLS12_381.mk_g1(List.get(0, abc),
                List.get(1, abc),
                List.get(2, abc)),
            b = BLS12_381.mk_g2(List.get(3, abc),
                List.get(4, abc),
                List.get(5, abc),
                List.get(6, abc),
                List.get(7, abc),
                List.get(8, abc)),
            c = BLS12_381.mk_g1(List.get(9, abc),
                List.get(10, abc),
                List.get(11, abc))
         }

    function make_input(inp: list(int)): list(BLS12_381.fr) =
        let newList = []
        switch(inp)
            [] => newList
            i :: inp => BLS12_381.int_to_fr(i) :: newList

    entrypoint caller(): address=
        Call.caller

