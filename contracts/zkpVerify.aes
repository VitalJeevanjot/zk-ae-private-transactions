
@compiler >= 6

include "BLS12_381.aes"
include "List.aes"

contract VerifyZKP =

    record verify_key = { a : BLS12_381.g1, b : BLS12_381.g2, c : BLS12_381.g2, d : BLS12_381.g2, ic : list(BLS12_381.g1) }
    record proof = { a : BLS12_381.g1, b : BLS12_381.g2, c : BLS12_381.g1 }

    public entrypoint verifyingKey() : verify_key =
        let _a = BLS12_381.mk_g1(
            569848838446466305173213885854856880715431430996317852766098834705391414746387657082383350273914706049544935121772,
            341247705186082893123497800075052957483943723844287069877004671822258162357351098659576767543805191540102823286613,
            1
         )

        let _b = BLS12_381.mk_g2(
            3434849275828814471124475923415937511368871592789113353031603132072962638388203776392392642106392326823092709670895,
            1174468865451370120480249587850202160982484797733603983334287792864621552693531184501516878522107208591565254716216,
            3849859022156656737497870653208848291076384760103111070238594290085049721091817151894488391459890371250446677958669,
            3177225055643857082410157290887060612949956086298386757982731097797559077004251011156139480336452625703506467889254,
            1,
            0
         )

        let _c = BLS12_381.mk_g2(
            352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160,
            3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758,
            1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905,
            927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,
            1,
            0
         )

        let _d = BLS12_381.mk_g2(
            1820141454742348370452557469523226427871286538233120649168294348616746008735217522191917495071915512661361205784596,
            1456611085300665822826020959804734073799857882845964658170076531822083687307383583456148873796305048412445420283767,
            1176512984700912144783387911299833315709499763397893345239442159614464683107990467809636526083760743792132616403128,
            2124312870481538137736029693949880505001750395260542304797853238295007198296485301496426611504241077552886426963426,
            1,
            0
         )

        let _ic: list(BLS12_381.g1) = [
            BLS12_381.mk_g1(
                1728385491430396630153336907485458327071574768489505249111941405492131676241801357328637901968049254563861814856795,
                2470657769496627462772784809465761813313505220407051987685518535631965378714561744610545267298880957028034311372736,
                1
            ),
            BLS12_381.mk_g1(
                888676753497136623212661978377935210833778088717601014169911175578624921052372367002957325281309347960714333330898,
                1777627257267615315688975948043047706847499200518392197049962112870552569757195790779709497627555004873740101223241,
                1
            ),
            BLS12_381.mk_g1(
                208447157128858925758241530735114762388951764118577695760758595375161174236456401589092730293140162352407150946622,
                2237840412839879106795607790657012416806632543895046470587164185323213714349312750713853142111597106560408322831782,
                1
            ),
            BLS12_381.mk_g1(
                3461051228359143842667458266619894877935619548709907111666477957635246338415654775463016456233654776544416883928505,
                1182055099336013356575767686622394823798845241239787909700405672626471716330491887609837404534700806449299843812206,
                1
            ),
            BLS12_381.mk_g1(
                251724198508918703580476352310001872383454293036159778203246193020211346216055059373072846738489857588451571993322,
                3270408975296765539068947226736625926596844291278495626249726620295190655697448076512660029661373538726542152883342,
                1
            ),
            BLS12_381.mk_g1(
                2017788422241345084200878295755716577041591151455163948984792638161951631011709746294149255799699048458932690183267,
                420805720241732151135104950703151344193545458637885421771756304214615606208679067759945634423230435223723944281772,
                1
            ),
            BLS12_381.mk_g1(
                616453756797650732751209852649840120538867494304875486024448427369196700036766222478912353128895575607066350643274,
                435373517490864637816669247699648409149063956366076716251335353090324987086901902681167610743042749781021691783050,
                1
            )
         ]

        {a =_a, b = _b, c = _c, d = _d, ic = _ic}

    public entrypoint verify(proof_abc: list(int), inp: list(int)) : bool =
        let p: proof = make_proof(proof_abc)
        let inp: list(BLS12_381.fr) = make_input(inp)
        let vk = verifyingKey()
        let vk_x = verify_proof(inp, p, vk)

        BLS12_381.pairing_check([BLS12_381.g1_neg(p.a), vk.a, vk_x, p.c],
                            [p.b, vk.b, vk.c, vk.d])



    function verify_proof(inputs: list(BLS12_381.fr), pr: proof, vk: verify_key) : BLS12_381.g1 =

        require(List.length(inputs) + 1 == List.length(vk.ic), "verifier-bad-input")

        let vk_x = calc_vk_x(vk.ic, inputs)

        vk_x


    function calc_vk_x(ics : list(BLS12_381.g1), xs : list(BLS12_381.fr)) : BLS12_381.g1 =
        switch(ics)
            (ic :: ics) => calc_vk_x_(ic, ics, xs)

    function calc_vk_x_(vk_x : BLS12_381.g1, ics : list(BLS12_381.g1), xs : list(BLS12_381.fr)) : BLS12_381.g1 =
        switch((ics, xs))
            ([], []) => vk_x
            (ic :: ics, x :: xs) => calc_vk_x_(BLS12_381.g1_add(vk_x, BLS12_381.g1_mul(x, ic)), ics, xs)

    function make_proof(abc: list(int)): proof =
        {
            a = BLS12_381.mk_g1(List.get(0, abc),
                List.get(1, abc),
                List.get(2, abc)),
            b = BLS12_381.mk_g2(List.get(3, abc),
                List.get(4, abc),
                List.get(5, abc),
                List.get(6, abc),
                List.get(7, abc),
                List.get(8, abc)),
            c = BLS12_381.mk_g1(List.get(9, abc),
                List.get(10, abc),
                List.get(11, abc))
         }
         
    function make_input(inp: list(int)): list(BLS12_381.fr) =
        let newList = []
        switch(inp)
            [] => newList
            i :: inp => BLS12_381.int_to_fr(i) :: newList

    entrypoint caller(): address=
        Call.caller

