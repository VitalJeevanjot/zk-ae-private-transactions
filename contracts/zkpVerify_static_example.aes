
@compiler >= 6

include "BLS12_381.aes"
include "List.aes"

contract VerifyZKP =

    record verify_key = { a : BLS12_381.g1, b : BLS12_381.g2, c : BLS12_381.g2, d : BLS12_381.g2, ic : list(BLS12_381.g1) }
    record proof = { a : BLS12_381.g1, b : BLS12_381.g2, c : BLS12_381.g1 }

    public entrypoint verifyingKey() : verify_key =
        let _a = BLS12_381.mk_g1(
            Bytes.to_int(#12ee62cfd1c5980809f75b9909c0f86a398587534f6cdd19127cefe87a648d1cae9f5c11b7440b8edba88542a1a55d90),
            Bytes.to_int(#17c70f86772a78cca9795d484640c5f53403fa414e53863ae5b6e9efe2bf9d5700c530e6fa4cb31dcd1e11125693be77),
            1
         )

        let _b = BLS12_381.mk_g2(
            Bytes.to_int(#0754a30348333533f83a42bcfcf99a96e3fb78808dc77991afb4492acc43a753e0ec4766358d39ef153a31f4296f336f),
            Bytes.to_int(#016d2291690ef104c800753656f8df58ce30009d29347722ca11194726d43cd027e5fa4e2cd94d1aedaca382a4c018ac),
            Bytes.to_int(#12e45e1c3cee1179462185b1d85ba61422493e5480438a70c0881940ac55fe3cb516a4ed3bb06618cb89ae32a93ae653),
            Bytes.to_int(#158155d9a904a7706a9a48276c909f1cf73774bf7b8aaffe7a28cdf7c7c319eb8b1cd336056dcc77a86aa14b1a1b57ae),
            1,
            0
         )

        let _c = BLS12_381.mk_g2(
            Bytes.to_int(#06cafae519fefbe63716fa573aad84fd70c652b4ff7570bf7820fe3efd2de50544124c4b4166763419dad87067b8ce06),
            Bytes.to_int(#10d05dbf84c5df2c57dd7133ecc50eddf193ce7207ef6e1e376094201275dee2a32fb1261bae75492530b95ec71cc8a5),
            Bytes.to_int(#0bcee022593da439a47712b55d85346e9cdb7c93dcbdfc227e87cb5f202bd9ff097509a65b79b7198267616096dc269a),
            Bytes.to_int(#0d8b1551b22a4b99a4f9bbb1c39b68e71a2e8d25aa8ef7ec2d2d23d5438e8156d66c5bdf867515b5e91adc8d5d5298da),
            1,
            0
         )

        let _d = BLS12_381.mk_g2(
            Bytes.to_int(#17e076a71fc0ba67ae89fd126264830c70a46e5242e255bb3492dde45174161b0a29141de50a385407140455c6c9e677),
            Bytes.to_int(#0f091efb1a65853bfb08a14657807588142ab9fc1d33fd845af80e18a83bc86486ad4d766a08ce3f45e6aeb2f44419f7),
            Bytes.to_int(#08efd75e1e2b1fa609c57391b582a26e0765a26d2f02c471cc7e284d0201559dbd0e29cf96bc9c1e97e8f421bfc29d65),
            Bytes.to_int(#09e134299eab0bb7e58c6e09c9feef43db1476d58051dcc17e995c31bf62170adf82e548fba314d8c126e11cbcb391e0),
            1,
            0
         )

        let _ic: list(BLS12_381.g1) = [
            BLS12_381.mk_g1(
                Bytes.to_int(#0032af1e8e2318c5489b0a11847fb74a16c7d435a26211226c655c8bae70e6cc8cd0b7a149bd6210d4a228c150cb03d8),
                Bytes.to_int(#086bbe77004dd97d2672166cccb557500d9fd18a606f92500fa2f529d0fb0e424afd5a1e3ce935bf12af5af266851930),
                1
            ),
            BLS12_381.mk_g1(
                Bytes.to_int(#031a698704cbef6cdddee0bb10b135b804f2483f3832618725365a4211a17da28a6d5fd993fdfe17639c939b71777103),
                Bytes.to_int(#05fe140534c0e435e7d22b41f654e6a2be2f5861c655e7173edb85230dd6a47e4d1fe510906cd5909e172c0b2f9c9c1e),
                1
            )
         ]

        {a =_a, b = _b, c = _c, d = _d, ic = _ic}

    public entrypoint verify(proof_abc: list(int), inp: list(int)) : bool =
        let p: proof = make_proof(proof_abc)
        let inp: list(BLS12_381.fr) = make_input(inp)
        let vk = verifyingKey()
        let vk_x = verify_proof(inp, p, vk)

        BLS12_381.pairing_check([BLS12_381.g1_neg(p.a), vk.a, vk_x, p.c],
                            [p.b, vk.b, vk.c, vk.d])



    function verify_proof(inputs: list(BLS12_381.fr), pr: proof, vk: verify_key) : BLS12_381.g1 =

        require(List.length(inputs) + 1 == List.length(vk.ic), "verifier-bad-input")

        let vk_x = calc_vk_x(vk.ic, inputs)

        vk_x


    function calc_vk_x(ics : list(BLS12_381.g1), xs : list(BLS12_381.fr)) : BLS12_381.g1 =
        switch(ics)
            (ic :: ics) => calc_vk_x_(ic, ics, xs)

    function calc_vk_x_(vk_x : BLS12_381.g1, ics : list(BLS12_381.g1), xs : list(BLS12_381.fr)) : BLS12_381.g1 =
        switch((ics, xs))
            ([], []) => vk_x
            (ic :: ics, x :: xs) => calc_vk_x_(BLS12_381.g1_add(vk_x, BLS12_381.g1_mul(x, ic)), ics, xs)

    function make_proof(abc: list(int)): proof =
        {
            a = BLS12_381.mk_g1(List.get(0, abc),
                List.get(1, abc),
                List.get(2, abc)),
            b = BLS12_381.mk_g2(List.get(3, abc),
                List.get(4, abc),
                List.get(5, abc),
                List.get(6, abc),
                List.get(7, abc),
                List.get(8, abc)),
            c = BLS12_381.mk_g1(List.get(9, abc),
                List.get(10, abc),
                List.get(11, abc))
         }
    function make_input(inp: list(int)): list(BLS12_381.fr) =
        let newList = []
        switch(inp)
            [] => newList
            i :: inp => BLS12_381.int_to_fr(i) :: newList

    entrypoint caller(): address=
        Call.caller

