const { assert } = require('chai');
const { utils, wallets } = require('@aeternity/aeproject');

const EXAMPLE_CONTRACT_SOURCE = './contracts/PairVerify.aes';

describe('VerifyContract', () => {
  let client;
  let contract;

  before(async () => {
    client = await utils.getClient();

    // a filesystem object must be passed to the compiler if the contract uses custom includes
    const filesystem = utils.getFilesystem(EXAMPLE_CONTRACT_SOURCE);

    // get content of contract
    const source = utils.getContractContent(EXAMPLE_CONTRACT_SOURCE);

    // initialize the contract instance
    contract = await client.getContractInstance({ source, filesystem });

    var points = {
      a: [20491192805390485299153009773594534940189261866228447918068658471970481763042, 9383485363053290200918347156157836566562967994039712273449902621266178545958],
      b: [[4252822878758300859123897981450591353533073413197771768651442665752259397132, 6375614351688725206403948262868962793625744043794305715222011528459656738731], [21847035105528745403288232691147584728191162732299865338377159692350059136679, 10505242626370262277552901082094356697409835680220590971873171140371331206856]],
      c: [[11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781], [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930]],
      d: [[5563441545933948488218476494240706057924259789995623756679765101921985839773, 14322932008140731863626437644704537772004063670431390131921086482467808925808], [10519417790328391187994375766106885897716047910761289758197540860719091765039, 19928495485339881223957653982775976414131926290258541241094287378087674453300]],
      ic: [[6819801395408938350212900248749732364821477541620635511814266536599629892365, 9092252330033992554755034971584864587974280972948086568597554018278609861372], [17882351432929302592725330552407222299541667716607588771282887857165175611387, 18907419617206324833977586007131055763810739835484972981819026406579664278293]]
    }
    await contract.deploy(points);

    // create a snapshot of the blockchain state
    await utils.createSnapshot(client);
  });

  // after each test roll back to initial state
  afterEach(async () => {
    await utils.rollbackSnapshot(client);
  });

  it('VerifyContract: get proof', async () => {
    const vks = await contract.methods.get_vk();
    console.log(vks.decodedResult)
  });

});
